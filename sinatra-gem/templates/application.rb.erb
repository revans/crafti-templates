$stdout.sync = true

require 'pathname'
require 'logger'
require 'time'

module Application
  extend self

  def root
    @root ||= ::Pathname.new(__dir__).join('..')
  end

  def public_dir
    root.join('public')
  end

  def views_dir
    root.join('views')
  end

  def config
    @config ||= ::Env.load(root)
  end
end

require 'bundler'
Bundler.require(:default, Application.config.env)

module <%= appname %>
  module Configuration
    def self.included(app)

    # Before Filter for handling HTTP Cache-Control
    # app.before do
    #   app.cache_control :public, :must_revalidate, max_age: 60
    #   app.expires 500,  :public, :must_revalidate
    # end

    # general default configuration
    app.configure do
      app.set :root,               Application.root
      app.set :public_folder,      Application.public_dir
      app.set :views,              Application.views_dir

      # app.mime_type :plain,        'text/plain'
    end

    ## Environment Specific Configuration
    #
    app.configure :development do
      app.enable :sessions, :logging, :dump_errors, :raise_errors, :show_exceptions
    end

    # app.configure :test         do; end
    # app.configure :staging      do; end

    # app.configure :production do
    #   require 'rack/cache'
    #   use Rack::Cache
    # end

    # 404 Error Handling
    app.not_found do
      # do something, return a 404 page
    end

    # Application Error Handling
    #
    # Can also do:
    #
    #   * app.error 405...510 do;end
    #
    app.error do
      # Log an Error to a File or STDOUT/STDERR
      # "Sorry there was a nasty error - #{env['sinatra.error'].name}"
    end

    # Helpers
    app.helpers do
      app.include ::Rack::Utils
      alias_method :h, :escape_html

      def url_path(*path_parts)
        [ path_prefix, path_parts ].join('/').squeeze('/')
      end
      alias :u :url_path

      def path_prefix
        request.env['SCRIPT_NAME']
      end

      def current_page
        url_path(request.path_info.sub('/', ''))
      end

      def to_time(time)
        ::Time.parse(time).strftime("%B %d, %Y at %I:%M:%S %p")
      end
    end

  end
end